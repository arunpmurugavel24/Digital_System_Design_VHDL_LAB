library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


package cpu_defs_pack is

	-- PC, Addr Wire of Bus, Memory Depth --
    constant AddrSize       : integer := 16;
    constant BytesperWord   : integer := 2;
    constant MemoryAddrSize : AddrSize - BytesperWord;

	-- Data Wire of Bus, Memory Width --
	constant BusDataSize    : integer := 16;

    -- (maximum) Size of Interuction --
    constant InstrSize      : integer := 31;

    -- Sizes of Register --
    constant RegDataSize    : integer := 32;
    constant RegAddrSize    : integer := 5; 

    -- Type of Opcode --
    constant opcode_type     : integer := 7;


    -- Definition of Types --
	subtype AddrType is bit_vector
		(AddrSize-1 downto 0);
        
	subtype InstrType is bit_vector
		(InstrSize-1 downto 0);
        
	subtype BusDataType is bit_vector
		(BusDataSize-1 downto 0);
        
	subtype RegDataType is bit_vector
		(RegDataSize-1 downto 0);
        
	type RegType is array 
    	(integer range 2**RegAddrSize-1 downto 0) of RegDataType;
        
	type MemType is array
    	(integer range 2**MemAddrSize-1 downto 0) of BusDataType;
    
    
    -- Definition of Opcode --
    
    
    -- Load and Store PC Instructions --
    constant code_ldpc : opcode_type := "0000011";
    constant code_stpc : opcode_type := "0100011";
    
    -- Logic and Arithmetic Instruction --
    -- ADD, SUB, SLL, SLT, SLTU, XOR, SRL, SRA, OR, AND --
    constant code_logic: opcode_type := "0110011";





    -- No Operation and Stop Instruction --
    constant code_nop  : opcode_type := "0000000";
    constant code_stop : opcode_type := "0000001";
    
    -- Logic and Arithmetic Instruction --
    constant code_addc : opcode_type := "0000011";
    constant code_subc : opcode_type := "0000101";
    constant code_not  : opcode_type := "0000110";
    constant code_rea  : opcode_type := "0001010";
    constant code_reo  : opcode_type := "0001011";
    constant code_rex  : opcode_type := "0001100";
    constant code_rol  : opcode_type := "0010000";
    constant code_rolc : opcode_type := "0010001";
    constant code_ror  : opcode_type := "0010010";
    constant code_rorc : opcode_type := "0010011";
    
    -- Register Instruction --
    constant code_ldc  : opcode_type := "0100000";
    constant code_ldd  : opcode_type := "0100001";
    constant code_ldr  : opcode_type := "0100010";
    constant code_std  : opcode_type := "0100011";
    constant code_str  : opcode_type := "0100100";

    -- In and Out Instructions --
    constant code_in   : opcode_type := "0100101";
    constant code_out  : opcode_type := "0100110";
    
    
    -- Jump Instruction -- 
    constant code_jmp  : opcode_type := "0110000";
    constant code_jz   : opcode_type := "0110001";
    constant code_jc   : opcode_type := "0110010";
    constant code_jn   : opcode_type := "0110011";
    constant code_jo   : opcode_type := "0110100";
    constant code_jnz  : opcode_type := "0110101";
    constant code_jnc  : opcode_type := "0110110";
    constant code_jnn  : opcode_type := "0110111";
    constant code_jno  : opcode_type := "0111000";
    

end cpu_defs_pack;
