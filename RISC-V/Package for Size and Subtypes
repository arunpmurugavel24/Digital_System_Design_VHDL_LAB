library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


package cpu_defs_pack is
    -- Definition of Types --
    constant bus_width      : natural := 12;
    constant data_width     : natural := bus_width;
    constant addr_width     : natural := bus_width;
    
    constant reg_addr_width : natural := 2;
    constant opcode_width   : natural := 6;
    
    subtype data_type is
        bit_vector (data_width - 1 downto 0 );
    subtype addr_type is
        bit_vector (addr_width - 1 downto 0 );
    subtype reg_addr_type is
        bit_vector (reg_addr_width - 1 downto 0);
    subtype opcode_type is
        bit_vector (opcode_width - 1 downto 0);
        
    type reg_type is array(integer range 0 to 2**reg_addr_width-1) of data_type;
    type mem_type is array(integer range 0 to 2**addr_width) of data_type;
    
    -- Definition of Opcode --
    -- No Operation and Stop Instruction --
    constant code_nop  : opcode_type := "000000";
    constant code_stop : opcode_type := "000001";
    
    -- Logic and Arithmetic Instruction --
    constant code_add  : opcode_type := "000010";
    constant code_addc : opcode_type := "000011";
    constant code_sub  : opcode_type := "000100";
    constant code_subc : opcode_type := "000101";
    constant code_not  : opcode_type := "000110";
    constant code_and  : opcode_type := "000111";
    constant code_or   : opcode_type := "001000";
    constant code_xor  : opcode_type := "001001";
    constant code_rea  : opcode_type := "001010";
    constant code_reo  : opcode_type := "001011";
    constant code_rex  : opcode_type := "001100";
    constant code_sll  : opcode_type := "001101";
    constant code_srl  : opcode_type := "001110";
    constant code_sra  : opcode_type := "001111";
    constant code_rol  : opcode_type := "010000";
    constant code_rolc : opcode_type := "010001";
    constant code_ror  : opcode_type := "010010";
    constant code_rorc : opcode_type := "010011";
    
    -- Register Instruction --
    constant code_ldc  : opcode_type := "100000";
    constant code_ldd  : opcode_type := "100001";
    constant code_ldr  : opcode_type := "100010";
    constant code_std  : opcode_type := "100011";
    constant code_str  : opcode_type := "100100";

    -- In and Out Instructions --
    constant code_in   : opcode_type := "100101";
    constant code_out  : opcode_type := "100110";
    
    -- Load and Store PC Instructions --
    constant code_ldpc : opcode_type := "100111";
    constant code_stpc : opcode_type := "101000";
    
    -- Jump Instruction -- 
    constant code_jmp  : opcode_type := "110000";
    constant code_jz   : opcode_type := "110001";
    constant code_jc   : opcode_type := "110010";
    constant code_jn   : opcode_type := "110011";
    constant code_jo   : opcode_type := "110100";
    constant code_jnz  : opcode_type := "110101";
    constant code_jnc  : opcode_type := "110110";
    constant code_jnn  : opcode_type := "110111";
    constant code_jno  : opcode_type := "111000";
    

end cpu_defs_pack;
